#jsp03
	
	jsp에는 자바 코드가 들어가면 안 된다...
	변수가 필요하다면 컨트롤러에서 만든다...
	
	
	<<내장 객체의 영역>
	: 내장 객체 이용 시 서버 스스로가 필요한 데이터 보관 및 사용 가능
		자바처럼 변수에 기억해뒀다가 사용해도 되지만 
		자바로 변수 만들면 서비스 함수 내에 지역변수로 만들어지기 때문에
		같은 지역(문서)에서만 사용할 수 있게 된다.
		
		좀 더 다양한 문서에서 데이터를 공유할 수 있는 기능을 제공하고 있다.
		
		다만, 내장 객체 중 무엇을 이용해서 데이터를 기억했는가에 따라서 
		그 데이터를 사용할 수 있는 영역이 달라지게 된다..
		
		
		+)
		session 객체 : 서버에 접속하는 순간 생성, 일정시간 멈춰있거나 페이지 나갔을 때 소멸
						여기에 데이터 넣어두면 계속 사용 가능..
						로그인 처리를 주로 여기다 함 (서버 접속 유지 동안 객체도 유지되기 때문)
		  
		  
		자바 클래스가 작업해서 html 소스코드를 만든 뒤 클라이언트에게 보내준다.
		요청에 맞는 html 소스코드를 만들 클래스를 실행해줘야 한다. 
		
		
		
		따라서 이것을 내장객체의 영역이라고 표현한다.
		
		
		[예]
			
			파라미터는 set() 없고 get()만 잇따.
			
			
			request.setAttribute(); 
			=> request 객체에 데이터 심는 함수
				이 경우 요청이 유지되는 상태(url이 변경되지 않는 동안)에서는 
				기억한 데이터를 사용할 수 있다.
			
			
			session.setAttribute();
			=> 이렇게 데이터를 기억하면 이것은 세션이 유지되는 동안에는
				그 데이터를 사용할 수 있게 된다. 
				  
		
		1. pageContext
			: 같은 html 문서(페이지) 안에서만 그 데이터를 사용할 수 있게 된다.
			
			<%
				int num = 30000;
			%>
			
				=> jsp 파일이 자바클래스로 변환되고 service 함수 내에 지역변수로 생성된다.
			
			<%!
				int num = 10;
			%>
				
				=> jsp 파일이 클래스로 변환됐을 때 그 클래스 멤버 변수로 생성된다.
					따라서 이 페이지(클래스)에서만 사용 가능한 변수다..
			
			=> 두 경우 다 사용하지 않는다. 함수 내에서 변수로 기억하는 것과 동일하기 때문
		
		
	*	2. request
			: 같은 요청 유지한 문서(url 유지)에서 그 데이터 사용 가능
				
	*	3. session
			: 같은 세션을 유지한 문서에서 그 데이터 사용 가능
				아이디 비번 입력 후 로그인 유지 상태 
		
		4. application
			: 같은 서버 사용하는 문서에 그 데이터 사용 가능 		
				웹 서버는 각각의 클라이언트에게 독립적으로 응답하는 것이 일반적
				즉, 다른 클라이언트 요청과 상관없이 그 클라이언트가 요청한 문제점을 해결하는 것이 일반적
				굳이 모든 문서에서 동일한 데이터를 사용할 일은 없다.
				보안이 구리다...
				
		[참고]
			데이터 입력 함수 : setAttribute("키값", 데이터);
			=> 마치 Map 처럼 데이터 입력
				이 때 입력되는 데이터는 모두 Object 타입으로 자동 형변환 된다.				
			
			데이터 꺼내는 함수 : getAttribute("키값");
			=> Map처럼 사용
				꺼낸 데이터는 원래 형태로 강제형변환 해줘야 한다. 
				
		[주의]
			Attribute와 달리 parameter는 데이터 입력 함수는 없고 꺼내는 함수만 있다.
			
			request.getParameter("키값"); ==> O
			request.setParameter("키값"); ==> X
			
			또한 문자열로 전송되므로 꺼내면 문자열 데이터이다.
			따라서 문자열 변수로 받아서 사용해야 하며 다른 형태로 변환해야 한다면 강제 형변환이나 파싱 해야 함
			
=====================

	<<액션 태그>>
	: jsp는 html 언어 기반으로 해서 필요한 위치에 자바적인 요소를 스크립트 하는 방식으로 만들어진 언어
		html은 태그 중심으로 작성하고 자바 요소는 <% %> 이용해서 처리하므로 다소 불편
		자주 사용하는 자바 기능을 html처럼 태그 방식으로 사용할 수 있게 해주는 게 액션 태그
	
		1. forward 대신하는 액션태그
		
			[형식1]
				<jsp:forward page="대신 응답할 문서 경로" />  
				or <jsp:forward page="대신 응답할 문서 경로"></jsp:forward>  
				
				=> 보여줄 페이지만 변경
				
				서버가 view 처리하는 방식 
					forward : url 유지, view만 바뀜
					redirect : url까지 변경, 요청 새롭게 만듦
					
			[형식2]
				<jsp:forward page="대신 응답할 문서 경로">
					<jsp:param name="키값" value="데이터" scope="???" />
				</jsp:forward>  
				
				=> 보여줄 페이지 변경하면서 부가 정보 알려줌
				
			[참고]
				액션태그는 xhtml 기반으로 제작된 태그
				따라서 몸체 잇는 태그
					<태그이름>
						내용
					</태그이름>
					
				몸체 없는 태그
					<태그이름 속성="속성값" />
				
	*	2. 다른 문서 포함시키는 기능을 가진 액션 태그
			(<%@ include file="???" %>) 과 같은 역할 하는 액션 태그
			
			[형식]
				<jsp:include page="합칠문서경로" />
			
			[주의]
				<%@ include file="합칠문서경로" %>
				=> 먼저 문서 내용 합친 뒤 클래스로 만들고 컴파일
					충돌 우려 있따
					
				<jsp:include page="합칠문서경로" />
				=> 합칠 문서와 합쳐질 문서 각각 클래스로 만들고 실행한 후 그 결과만 합친다..
					컴파일 따로하니까 충돌 우려가 없다


============================


	<%= 변수 또는 함수 %> 이 자리에 결과가 그대로 출력
	
	
	<<JSTL(Java Standard Tag Library)>>
		
		
		jsp 제작 시 html과 자바소스코드가 혼용되어서 만들어짐
		
		[예]
			<% 자바소스코드 %>
			html 태그들
			<%= 변수 또는 함수 %>
			태그들..
			
		따라서 자바적인 내용 입력하는 경우 스크립트 릿 방식 사용해서 입력하게 된다.
		=> 개발자가 view 문서 제작할 때 항상 고민되는 부분
	
	
	
	JSTL이란??
		자바 명령을 태그로 만들어 놓은 것
		
		jsp는 html이 우선되므로 자바적인 요소 역시 태그 형식으로 작성할 수 있도록 해서
		통일된 방식으로 문서를 만들 만들 수 있도록 해주는 라이브러리	
	
		[예]
			
			<스크립트 릿 방식>
			
			<%
				for(int i = 0 ; i < 10 ; i++) {
			%>
				반복돼서 만들어질 태그들
			<%	
				}
			%>	
			
			<태그 라이브러리 사용>
			<c:forEach begin="1" end="10" step="1">
				반복돼서 만들어질 태그들
			</c:forEach>		
			
			<c:forEach var="data" items="${ARR}">
				태그들
				${data}
				태그들
			</c:forEach>	
	
	
	
	JSTL 사용방법
		1. JSTL 라이브러리를 다운 받아서 프로젝트의 WEB-INF/lib/ 폴더에 복붙
			jstl-1.2.jar/ jstl-api-1.2.jar
			
			[참고]
				/WEB-INF/lib/ 폴더는
				작업중인 프로젝트에서 사용할 외부 라이브러리 추가해주는 폴더
				
				
			JSTL 종류
			 *	1. Core Tag
					: 일반적인 자바 명령을 태그로 만들어 놓은 라이브러리
					
			 	2. Formatting Tag
					: 출력할 때 모양을 지정하기 위한 기능을 태그로 만들어 놓은 라이브러리
				
			 *	3. Function Tag
					: 자바에서 자주 사용하는 함수를 사용할 수 있도록 만들어놓은 라이브러리
					
				4. SQL Tag
					: 데이터베이스 사용 시 필요한 기능 태그로 만들어놓은 라이브러리
					
				5. XML Tag
					: xml 문서 처리를 위한 기능을 태그로 만들어 놓은 라이브러리
	
	
		2. JSTL이 필요한 문서(JSP)에 위 5가지 중 필요한 라이브러리 사용할 수 있도록 등록		
			이 작업은 모든 JSP 문서에서 매번 해줘야 한다..
			
			[형식]
				<%@ taglib prefix="???" uri="???" %>
			
				prefix : 아무 내용이나 기입해도 노상관
				taglib : 누군가 만들어 놓은 태그를 사용하도록 하는 명령
							이 때 자바는 오픈소스, 누구나 만들고 배포 가능
							이 때 문제점은 태그 이름이 중복될 수 있다는 점 	
						 
				prefix는 태그를 사용하는 사용자가 각각의 태그를 구분하기 위해 부여한 자신만의 규칙
							
				uri : 이 태그 라이브러리를 제공하는 CDN 네트워크 경로
						또는 태그 라이브러리 기능 제공하는 클래스 이름 지정			
				
					
					제작자 입장
						갑
							<str></str> 기능 만들어서 배포
										문자열로 출력하는 기능
						
						을
							<str></str> 기능 만들어서 배포
										문자열을 기억하는 기능
										
					사용자 입장
						갑의 태그
							prefix="a"
							<a:str>*****</str>	
							
						을의 태그			
							prefix="b"	
							
					
					불문율		
						
					*	1. Core
							<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>	
							
						2. Formatting
							<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>	
						
					*	3. Function
							<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
								
						4. SQL
							<%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql" %>
						
						5. XML
							<%@ taglib prefix="x" uri="http://java.sun.com/jsp/jstl/xml" %>
							
==============================

	<<표현언어(표현식, Exptression Language : EL)>>

		:   직역하자면 표현언어를 의미, 
			EL은 JSP 스크립트 태그(<%= %>)를 대신해 JSP 값들을 좀 더 편하게 출력하기 위해 제공되는 언어
		
		
			표현자방식으로 데이터 출력 시 
				<%= %> 태그 사용 시 일반 태그 사이에 내용을 출력할 경우
				< > 사이에 표현식이 표현되기 때문에 겹쳐지므로 문제 발생 여지가 있따.
			EL은 이런 단점을 보완하고 간결한 데이터 출력을 위해서 제공되는 기능
			
			EL은 변수를 출력하기도 하지만
			연산자와 내장 객체도 제공하고 있으므로 내장 객체의 내용도 출력할 수 있다.
			
		[형식]
			${출력할 내용}
			
		[의미]
			출력할 내용을 화면에 출력\
			출력 내용은 변수, 연산식, 함수 등 모든 것이 될 수 있다.
			<%= =>와 같다.
		
		[예]
			컨트롤러에서 req.setAttribute("KEY", "홍길동");
			라고 뷰에게 넘겨주면 (요청 객체에 저장하면)									
			= forward로 뷰만 바꿔치기 하고 요청 객체는 유지하고 있으므로 가능			
			뷰에서는 ${KEY} 로 호출해서 사용하면 된다.
			
		[중요]
			EL객체 이용해서
			VO 통째로 뷰에 전달할 수 있다.				
			만약 컨트롤러에서 req.setAttribute("DATA", mVO); => get함수 자동 호출				
			뷰에서는 회원 번호 출력할 때는 ${DATA.mno}처럼 vo 안에 만들어 놓은 변수 이름을 기술해서 사용
			이때 이 jsp 클래스에서 vo의 변수에 직접 접근하는 것이 아니고 getxxx() 자동 호출
		
		[참고]
			${데이터} 에서 데이터 부분에 바로 사용할 수 있는 것은 request 객체의 속성과 session 객체 속성
			 
			 	${requestScope.키값}					
			 	${sessionScope.키값} 이 원칙이나
			 	
			 	${키값}으로 사용할 수 있도록 만들어둠
		
		[내장객체]
			
			pageScope
			: Page 영역에 존재하는 객체 참조
			
		*	requestScope
			: Request 영역에 존재하는 객체 참조
			
		*	sessionScope
			: Session 영역에 존재하는 객체 참조
			 
			applicationScope
			: Application 영역에 존재하는 객체 참조
			
		*	param
			: 파라미터 값을 출력할 때 사용 
			
		*	paramValues
			: 파라미터 값을 배열로 꺼낼 때 사용 
						
			header
			: Header 정보를 얻어올 떄 사용
			 
			headerValues
			: Header 정보를 배열로 얻어올 때 사용
			
		*	cookie
			: 쿠키 객체를 참조할 때 사용
			
			initParam
			: 컨텍스트의 초기화 파라미터를 의미
			
			pageContext					
			: PageContext 객체를 참조
		
		==> EL 객체 중 requestScope, sessionScope에 기억된 데이터는 소속을 생략해도 무방						
	
	<c:out>
		: 표현식과 동일하게 뭔가를 출력하는 기능을 가진 태그
	
		[형식]
			<c:out vlaue="출력할 내용" />
		
		[예]
			컨트롤러에서 req.setAttribute("NAME", "jennie"); 라고 데이터를 속성에 기억했다면
			뷰에서는 <c:out value="${NAME}"의 형식으로 사용
		
		[장점]
			동시에 여러 개 출력 가능
			스스로가 여러 개를 하나의 문자열로 결합해서 출력
			
			[예]
				<c:out value=${'<tag>, 10'} />
				==> <tag>, 10을 출력			
								
		
		[참고]
			jstl 사용 시
				
				1. 몸체 있는 태그
					<시작태그>
					</시작태그>
					
				2. 몸체 없는 태그
					<태그이름 속성="속성값" ...>						
			
	<c:set>
	: 변수에 데이터 기억해 놓는 기능을 가진 태그
	
		[형식]
			<c:set var="변수이름" value="데이터" />
		
		[예]
			<c:set var="name" value="jennie" />						 
			==> String name = "jennie";
				과 같은 역할..
				
				사용 시
				${name} ==> jennie 출력
		
		[참고]
			이 때 기억할 데이터 타입은 노상관
			" "는 필수		
	
	<c:remove>
		: 변수의 데이터 강제로 삭제하는 태그
		
		[형식]
			<c:remove var="변수이름" />
		
		[예]
			<c:remove var="name" />
	
	
  * <c:if>
  		: 자바의 if문 같은 태그
  		
  		[형식]
  			<c:if test="조건식">
  				태그 또는 내용
  			</c:if>	
  			
  		[의미]
  			조건식이 참일 경우 태그 또는 내용을 화면에 보여줘라 	
  		
  		[주의]
  			else나 else if 태그는 업성
  			따라서 다중 조건식 사용해야 하면 이 태그를 여러 번 조건식을 각각 나열해서 기술해야 함
  			
  	*	[참고]
  			JSTL에서는 조건식 만들 때 조건 연산자를 자바에서 사용하는 연산자 사용할 수도 있고
  			JSTL 연산자 사용할 수도 있다.
  			
  				eq 	== 
  				lt	<
  				le	<=
  				gt	>
  				ge	>=
  				ne	!=
  				
  				and	&&
  				or 	||
  				not	!
  				
  				empty	데이터가 비어있느냐?
  				
  				
  				[예]
  					컨트롤러에서
  						ArrayList list  = dao.getList();
  						req.setAttribute("LIST", list);
  					
  					jsp 페이지에서
  						<c:if test="${empty LIST}" >
  							<h2>회원들이 존재하지 않습니다.</h2>
  						</c:if>
  						<c:if test="${not empty LIST}">
  							<c:forEach var="data" items="${LIST}" 
  								<div class="w3-button w3-blue">${data}</div>
  							</c:forEach>
  						</c:if>
  						
  						
	* <c:choose>
		: 자바의 switch case와 유사한 기능 가진 다중 조건 처리 명령 위한 태그
	
		[형식]
			<c:choose>
				<c:when test="조건식1">
					처리내용1
				</c:when>		
				<c:when test="조건식2">
					처리내용2
				</c:when>		
				<c:when test="조건식3">
					처리내용3
				</c:when>		
				<c:when test="조건식4">
					처리내용4
				</c:when>
				....		
				<c:otherwise>
					처리내용
				</c:when>		
			</c:choose>
		
		[참고]
			한 개라도 c:when이 맞으면 그것만 처리하고 c:choose를 종료한다.
		
	
	* <c:forEach>
		: 자바의 for 명령 해당 태그
		
		[형식]
			1. <c:forEach var="변수" begin="시작값" end="종료값" step="증감값">
			   	내용... (여기서 반복문의 카운터 변수값을 사용할 때는 ${변수}의 형식으로 사용하면 된다.)
			   </c:forEach>
				
				[예]
					java에서 
					for(int i = 1 ; i < 10 ; i++) {
					}
					
					태그 라이브러리에서는
					<c:forEach var="i" begin="1" end="9" step="1">
						${i},
					</c:forEach>
				
				[주의]
					end 속성값은 "==" 개념이 포함된다.
					end 값까지 반복한다.
				
				[참고]
					step이 1인 경우는 생략해도 됨
					
			2. <c:forEach var="변수이름" items="${컬렉션 혹은 배열}">
					${변수이름}
			   </c:forEach>
			   => 자바의 향상된 for 명령에 해당, 
			   		컬렉션이나 배열 내용을 변수에 한 개씩 꺼내서 기억시켜 데이터 갯수만큼 반복처리
			   		
			   [참고]
				   	for Each태그는 varStatus라는 속성 사용 가능
				   	이 속성은 반복 상태를 기억하는 역할
			   	
			   [예]
				   	<c:forEach var="..." items="????" vatStatue="변수">
				   		varStatus 속성에 기술한 변수에 반복상태가 기억된다.
				   	</c:forEach>
			   	
			   [반복상태]
			   		current : 현재 꺼낸 데이터가 기억됨
			   		index : 현재 몇 번째 반복인지 기억(index: 0부터 카운트) 
			   		count : 현재 반복 회차 기억(1부터 카운트)
			   		first : 현재 반복이 첫 반복인지를 true/false로 기억
			   		last : 현재 반복이 마지막 반복인지를 true/false로 기억
			   		begin : 시작값
			   		end : 종료값
			   		step : 증감값
			   		
			   		=> 사용 시
			   			${변수.current} => 현재 꺼낸 데이터 출력
			   			${변수.count} => 현재 반복 회차 출력

	<c:forTokens>
		: 하나의 문자열을 지정한 기호로 분리시켜서 반복하는 태그
			자바의 StringTokenizer와 비슷한 역할 하는 태그
			
		[형식]
			<c:forTokens var="변수" items="데이터" delims="구분자">
			</c:forTokens>
			
		[참고]
			delims 속성은 여러 구분 문자를 동시에 사용할 수 있다.
			
			
	<c:redirect>
		: 강제로 요청을 변경하는 
			response.sendRedirect()에 해당하는 태그
			
		[형식]
			1. <c:redirect url="새로운요청" />
				==> 일반적인 요청, 요청만 바꾸는 기능
			
			2. <c:redirect url="새로운요청" >
					<c:param name="키값" value="데이터" />
					<c:param name="키값" value="데이터" />					
				</c:redirect>
				==> 요청하면서 부가 정보를 동시에 제공하는 태그
				
				[참고]
					이 때 요청은 GET 방식
				
				[참고]
					리다이렉트 될 페이지에서 POST 방식으로 부가 정보를 추가해서 요청
					
					1. form 태그 만듦 (method, action, name, id 작성)
					2. 폼 태그 안에 전달할 데이터가 입력된 input 태그 만든다. 타입은 hidden
					3.  자바스크립트 에서 body 태그가 완성되면 위에서 만든 폼 태그를 전송한다.
				
				[예]
					컨트롤러에서 vo를 req.setAttribute("DATA", mVO);
					
					jsp 문서에서
					
					<body>
					<script type="text/javascript">
						$(document).ready(function(){
							$('#from').submit();
						});
					</script>
					
						<form method="POST" action="리다이렉트할 주소" name="frm" id="frm">
							<input type="hidden" name="mno" value="${DATA.mno}">
							<input type="hidden" name="name" value="${DATA.name}">
							<input type="hidden" name="id" value="${DATA.id}">
							<input type="hidden" name="ano" value="${DATA.ano}">
						</form>
					</body>
					
					
					
===============================

	1. 메인 페이지 띄우기
	2. 로그인 페이지
	3. 로그인 처리
	4. 내 정보 보기
	5. 내 정보 수정(+처리)
	6. 회원 탈퇴
	7. 회원 가입 폼 보기
	8. 회원 가입 처리
	
	--------
	
	게시판
	1. 게시판 리스트 보기
	2. 게시판 상세보기(디테일뷰)
	3. 수정하기, 폼보기
	4. 수정 처리 요청
	5. 글 삭제 redirect 서버가 강제로 바꾼다...
	6. 글 작성 폼보기
	7. 글 작성 처리요청
	8. 페이징 처리
	9. 파일 업로드
	
==============================

	Servlet = 응답문서 만들어주는 클래스