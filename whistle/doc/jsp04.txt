# jsp04

	<<jsp 프로젝트의 작업 순서>>
	
	0. 요청 설계
	
	1. 뷰 만들고
	
	2. 뷰 띄울 컨트롤러 작성
	
	3. 질의명령
	
	4. dao 함수
	
	5. 컨트롤러에서 받아서 처리
	
==================

	<MVC 패턴>
	: WEB 문서를 만드는 발전된 기술의 하나
		중간에 WAS(Web Application Server) 서버를 이용해 분산 처리하는 기술
		
		jsp 문서가 실행되는 순서
			1. 서버는 클라이언트의 요청 분석해 해당 문서 실행
				(디스패치 시킨다..)
			2. jsp는 뭔가 실행해서 데이터를 생산하고 
			3. 클라이언트에 응답하는 문서 작성
			4. 이 문서로 응답
			
		이 과정을 서버 혼자 담당한다.
		(따라서 중간에 스레드를 자동적으로 처리해서 
		여러 클라이언트를 동시에 응답하도록 시스템 자체가 만들어져 있다.)
		
		문제는 접속율이 높으면 서버가 다운되는 현상이 발생한다는 점
		이 문제를 해결하기 위해 서버의 크기가 점점 커지는 현상이 생겼다.
		최근엔 개인적으로 서버를 운영하는 경우도 있음
		이들이 서버를 완벽하게 구축할 수 없음
		
		이처럼 작은 서버가 담당할 수 있는 프로그램 기법이 필요했고
		이를 해결하기 위해 나온 기법이 분산시스템이다..
		이 분산 시스템 중 하나로 제시된 방법이 MVC 패턴이다.
	
	[참고]
		컴퓨터가 프로그램을 실행하면 
		그 프로그램에 그 컴퓨터가 가진 모든 자원을 제공하는 건 아니다.
		
		서버 역시 프로그램의 일종
		대형 컴퓨터 사용한다고 서버가 그 대형 컴퓨터 자원 100% 사용 가능한 건 아님
		
		분산 시스템이 필요한 이유는
		여러 개의 프로그램을 동시에 실행해서 각각의 일을 전담하게 하여
		시스템ㅇ 자원을 사용하는 비율을 늘리고
		그 프로그램이 하는 일은 줄어든다.
		
		
		따라서 전체적으로 각각의 프로그램이 부하를 줄이면서
		문제를 해결할 수 있게 된다.
	
	[참고]
		Model
		: 생산된 데이터 관리하는 기능 담당하는 클래스, 데이터 자체 이야기하기도 함
			(컨트롤러와 뷰 사이에 데이터를 주고 받는 기능도 포함)
		
		View
		: 생산된 데이터 이용해서 응답 문서 작성하는 기능 담당
		
		Controller
		: 데이터 생산하는 기능 담당
			(클라이언트의 요청에 따라 문제를 해결하는 기능을 담당)
		
		[종류]
			1. Dispatch 컨트롤러
				==> 서버를 대신해 요청을 분석하여 
					실행 문서 선택하도록 하는 컨트롤러
				==> 이 부분이 바로 서블릿으로 제작하게 될 부분
					
			2. 일반 컨트롤러
				: 일반 자바 클래스로 제작..
			
			3. 뷰
				: 이것은 일반 JSP 문서로 작성(클래스로 변환되어 HTML 소스코드 만들어 줄 테니까)
					왜냐면 뷰는 응답문서 만드는 것이고
					응답 문서를 HTML로 만들어야 하므로 
					HTML 문서로 만들 수 있는 유일한 언어가 JSP
			
=========================

	<Servlet>
	: jsp 파일로 문서 작성해도 자바 클래스로 변환되어서 실행된다.
		이처럼 jsp문서가 변환된 클래스를 서블릿 클래스라고 부른다.
		
		만약 우리가 서블릿 클래스 직접 만들 수 있다면
		서버 입장에선 jsp를 서블릿 클래스로 변환하는 작업을 줄일 수 있게 되고
		처리속도가 더 빨라질 수 있다.
		
	[참고]
		web 페이지 만드는 기술 변천사
		
			Model1
			: jsp 문서 만들어서 문서 내에서 처리하는 기술
			
			Model2
			: mvc 패턴을 이용해 처리하는 기술
		
		
			
	<서블릿 클래스 만드는 법>
		
		1.HttpServlet 클래스 상속 클래스 제작
		
		2. 이 안에 4개의 함수 오버라이딩
		
			1) public void init() throws ServletException {}
				: init 시점에서 실행되는 함수
					따라서 자바 생성자 함수에 해당
					
			2) protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {}
			3) protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {}
				: 모든 service 시점에서 실행되는 함수
					따라서 실제로 클라이언트에게 응답하는 내용은 이 안에서 작성하며 된다.
				
				[참고]
					만약 위 함수 외에 service 함수가 존재하면 위 함수는 실행하지 않고 service 함수가 실행됨
			4) public void destroy()
				: destroy 시점에서 실행되는 함수
					따라서 이 부분에선 그 클래스가 주로 사용하던 자원을 제거하거나 반환해주는 목적으로 사용
		
		3. 각 함수에 역할을 코딩
			
			[참고]
				서블릿의 생존주기
				
					init	: 서블릿 클래스가 가장 처음 만들어지는 시점
					  |			(누군가 가장 처음 이 클래스를 요청한 경우 딱 한 번만 실행)
					  |
					  |
					service : 누군가 이 클래스를 요청한 시점
					  |			(요청할 때마다 매번 실행되는 함수)	
					  |
					destroy	: 적당한 시간(서버가 지정한 시간) 동안 요청이 전혀 없는 경우의 시점
								(적당한 시점이 되면 이 클래스는 없어져야 한다. 그때 실행되는 함수.
									따라서 주로 사용하던 자원을 닫는 목적으로 사용된다.)
		
			
			[참고] 만들어진 서블릿 클래스 실행하는 방법
				: jsp 문서는 그 문서를 요청하면 실행되지만 
					서블릿 클래스는 웹 문서가 아니므로 원칙적으로 요청할 수 없다.		
					따라서 서블릿 클래스가 실행되도록 요청 등록해줘야 한다.
					
						1. web.xml 파일에 요청 등록
							1) 서블릿을 등록
								: 만들어진 서블릿 클래스를 톰캣이라는 서버가 사용하도록 등록하는 방법
									
									<servlet>
										<servlet-name>loginAjax</servlet-name>
										<servlet-class>만들어진 서블릿 클래스 경로</servlet-class>
										: 패키지까지 전체경로를 정확하게 등록해야 함
									</servlet>
									
							2) 요청 내용과 서블릿을 매핑시킨다.
								: 어떤 요청이 오면 위에 만든 서블릿을 실행시킬 것인지를 등록하는 부분 
									
									<servlet-mapping>
										<servlet-name>서블릿이름</servlet-name>
										=> 서블릿 이름은 위에서 정의한 것 사용
										<url-pattern>패턴정의</url-pattern>
										=> 어떤 요청이 오면 실행할지 기술
											*를 이용해 만능 처리 가능
									</servlet-mapping>
									
						2. 서블릿 클래스에 어노테이션을 이용해서 요청등록을 하는 방법	
						
===========================
